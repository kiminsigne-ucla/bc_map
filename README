This is a simple barcode mapping script. My email is kiminsigne@gmail.com. Feel
free to email me with any questions and include in your email the command you are
using to run the script, the library file, and the first 1000 reads as a small 
test file to help with errors.

- To set up your environment, run ./setup.sh . It will download Miniconda and set
up your conda environment, installing all the necessary packages. 
- An example command is in example.sh
- It accepts as input a reads file in either FASTQ (unzipped), FASTA, or text 
format (one read per line). It assumes the read structure is barcode-variant or 
variant-barcode. The location of the barcode, the length of the barcode, and the
length of the variant are parameters passed into the script. 
- The library file is the file you submitted for array synthesis. It must be in 
either csv or tab format, with the name as the first field and the sequence 
as the second
- The primer length is used to trim the primer sequences from the beginning and
 end of the library file
- The script will only look for reads that perfectly match a library sequence, the
script will output the percentage of reads which are perfect
- For barcodes attached to these perfect reads, we keep those that appear at least
three times in order to eliminate any sequencing errors in the barcodes
- For these perfect barcode reads, we go back through all the reads. In order to 
keep a barcode, all the reads that map to that barcode must be fairly similar to 
each other according to some cutoff. To determine this cutoff, we randomly choose
two library sequences and determine the Levenshtein distance. We repeat this 10,000
times to bootstrap the Levenshtein distribution. We take the lower 1% percentile of
this distribution to be the cutoff. 
	- For the set of reads that map to a barcode, we set the most common read to be
	the reference. We then calculate the Levenshtein distance between each read 
	and the reference. The maximum Levenshtein distance must be below the cutoff 
	in order for the barcode to pass this filtering step. Optionally, users may 
	define their own cutoff
- There are optional parameters if your control sequences are shorter than your
variant library as these need to be mapped separately.
- The script will output how many barcodes pass all filtering and how much of the 
library is covered by these barcodes
- The file barcode_statistics.txt lists all the barcodes that passed filtering and
should be considered for downstream barcode RNA sequencing
- The file variant_statistics.txt lists the variant sequence, the variant name, 
the total number of barcodes, the number of unique barcodes, and the list of unique barcodes